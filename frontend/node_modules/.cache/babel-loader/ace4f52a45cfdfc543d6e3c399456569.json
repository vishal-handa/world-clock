{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vhand\\\\Documents\\\\coding assignments\\\\world-clock\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport countries from './countries';\n\nconst App = () => {\n  _s();\n\n  const [countryID, setCountryID] = useState('');\n  const [timezoneByCountry, setTimezoneByCountry] = useState([]);\n  const [selectedTZ, setSelectedTZ] = useState('');\n  const [selectedTime, setSelectedTime] = useState('');\n  let bool = false;\n  let timeBool = false;\n\n  const getCountryByClick = event => {\n    const theID = event.target.value;\n\n    if (theID !== \"Select a country\") {\n      console.log(theID);\n      let selectedCountry = countries.find(el => theID === el.alpha2);\n      setCountryID(selectedCountry.alpha2.toUpperCase());\n    }\n  };\n\n  const getZoneByClick = event => {\n    let zone = ev.target.value;\n    console.log(zone);\n    setSelectedTZ(zone);\n  };\n\n  useEffect(() => {\n    fetch(`/timezone/${countryID}`).then(res => res.json()).then(res => {\n      setTimezoneByCountry(res.data.timezones); //console.log(res);\n    });\n  }, [countryID]);\n\n  if (timezoneByCountry.length >= 1) {\n    bool = true;\n  }\n\n  if (selectedTime.length !== 0) {\n    timeBool = true;\n  }\n\n  useEffect(() => {\n    fetch('/timezone/zone', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'zone': selectedTZ\n      })\n    }).then(res => res.json()).then(res => setSelectedTime(res.message));\n  }, [selectedTZ]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: getCountryByClick,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Select a country\",\n        children: \"Select a country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), countries.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: el.alpha2,\n          id: el.alpha2,\n          children: el.name\n        }, el.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 18\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), bool && /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: getZoneByClick,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        disabled: true,\n        selected: true,\n        value: true,\n        children: \"Select country specific timezone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), timezoneByCountry.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: el,\n          id: el,\n          children: el\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 20\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 16\n    }, this), timeBool && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"hXBz72/moQGpqX9+Ji8eF8EYaOc=\");\n\n_c = App;\nexport default App;\nconst Wrapper = styled.div`\n  margin:auto;\n`;\n_c2 = Wrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"sources":["C:/Users/vhand/Documents/coding assignments/world-clock/frontend/src/App.js"],"names":["React","useEffect","useState","styled","countries","App","countryID","setCountryID","timezoneByCountry","setTimezoneByCountry","selectedTZ","setSelectedTZ","selectedTime","setSelectedTime","bool","timeBool","getCountryByClick","event","theID","target","value","console","log","selectedCountry","find","el","alpha2","toUpperCase","getZoneByClick","zone","ev","fetch","then","res","json","data","timezones","length","method","headers","body","JSON","stringify","message","map","name","Wrapper","div"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport countries from './countries'\n\n\nconst App=() => {\n  const [countryID, setCountryID]=useState('');\n  const [timezoneByCountry, setTimezoneByCountry]=useState([]);\n  const [selectedTZ, setSelectedTZ]=useState('');\n  const [selectedTime, setSelectedTime]=useState('');\n  let bool=false;\n  let timeBool=false;\n\n  const getCountryByClick=(event)=>{\n    const theID=event.target.value;\n    if(theID!==\"Select a country\"){\n      console.log(theID);\n      let selectedCountry= countries.find(el=>theID===el.alpha2)\n      setCountryID(selectedCountry.alpha2.toUpperCase());\n    }\n  };\n\n  const getZoneByClick=(event)=>{\n    let zone=ev.target.value;\n    console.log(zone);\n    setSelectedTZ(zone);\n  };\n  useEffect(()=>{\n    fetch(`/timezone/${countryID}`)\n    .then(res=>res.json())\n    .then(res=>{\n      setTimezoneByCountry(res.data.timezones);\n      //console.log(res);\n    });\n  },[countryID]);\n\n  if(timezoneByCountry.length>=1){\n    bool=true;\n  }\n\n  if(selectedTime.length!==0){\n    timeBool=true;\n  }\n\n  useEffect(()=>{\n    fetch('/timezone/zone', {\n      method:'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({'zone': selectedTZ})\n    })\n    .then(res=>res.json())\n    .then(res=>setSelectedTime(res.message));\n  },[selectedTZ]);\n  \n  return (\n    <Wrapper>\n      <select onChange={getCountryByClick}>\n      <option value=\"Select a country\">Select a country</option>\n        {countries.map(el=>{\n          return <option value={el.alpha2}\n                  key={el.name} \n                  id={el.alpha2}\n                  >{el.name}</option>\n        })}\n      </select>\n      {bool && <select onChange={getZoneByClick}>\n          <option disabled selected value>Select country specific timezone</option>\n          {timezoneByCountry.map(el=>{\n            return <option value={el}\n                            id={el}\n                    >{el}</option>\n          })}\n        </select>}\n\n        {timeBool && <p>{selectedTime}</p>}\n    </Wrapper>\n  );\n};\n\nexport default App;\n\nconst Wrapper=styled.div`\n  margin:auto;\n`;\n"]},"metadata":{},"sourceType":"module"}